/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as FluidStackApi from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace SshKeys {
    interface Options {
        environment?: core.Supplier<environments.FluidStackApiEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}

export class SshKeys {
    constructor(protected readonly _options: SshKeys.Options = {}) {}

    /**
     * Fetch a list of SSH key names associated with the authenticated user.
     *
     * @param {FluidStackApi.SshKeysListRequest} request
     * @param {SshKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FluidStackApi.UnauthorizedError}
     * @throws {@link FluidStackApi.UnprocessableEntityError}
     *
     * @example
     *     await fluidStackApi.sshKeys.list()
     */
    public async list(
        request: FluidStackApi.SshKeysListRequest = {},
        requestOptions?: SshKeys.RequestOptions
    ): Promise<FluidStackApi.SshKeyResponse[]> {
        const { showAll } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (showAll != null) {
            _queryParams["show_all"] = showAll.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FluidStackApiEnvironment.Default,
                "ssh_keys"
            ),
            method: "GET",
            headers: {
                "api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "fluidstack",
                "X-Fern-SDK-Version": "0.0.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return await serializers.sshKeys.list.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new FluidStackApi.UnauthorizedError(
                        await serializers.Message.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new FluidStackApi.UnprocessableEntityError(
                        await serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.FluidStackApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FluidStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FluidStackApiTimeoutError();
            case "unknown":
                throw new errors.FluidStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a new SSH key for the authenticated user.
     *
     * A unique name must be provided for the SSH key, along with a public key. The public key you provide is stored on your FluidStack account for use in SSH authentication.
     *
     * Supported public key formats: ssh-rsa, ssh-dss (DSA), ssh-ed25519, and ecdsa keys with NIST curves.
     *
     * @param {FluidStackApi.CreateSshKeyRequest} request
     * @param {SshKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FluidStackApi.UnauthorizedError}
     * @throws {@link FluidStackApi.UnprocessableEntityError}
     *
     * @example
     *     await fluidStackApi.sshKeys.create({
     *         name: "my_ssh_key",
     *         publicKey: "<my_public_key>"
     *     })
     */
    public async create(
        request: FluidStackApi.CreateSshKeyRequest,
        requestOptions?: SshKeys.RequestOptions
    ): Promise<FluidStackApi.SshKeyResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FluidStackApiEnvironment.Default,
                "ssh_keys"
            ),
            method: "POST",
            headers: {
                "api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "fluidstack",
                "X-Fern-SDK-Version": "0.0.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: await serializers.CreateSshKeyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return await serializers.SshKeyResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new FluidStackApi.UnauthorizedError(
                        await serializers.Message.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new FluidStackApi.UnprocessableEntityError(
                        await serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.FluidStackApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FluidStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FluidStackApiTimeoutError();
            case "unknown":
                throw new errors.FluidStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete an existing SSH key by its name.
     *
     * @param {string} sshKeyName
     * @param {SshKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FluidStackApi.UnauthorizedError}
     * @throws {@link FluidStackApi.UnprocessableEntityError}
     *
     * @example
     *     await fluidStackApi.sshKeys.delete("{ssh_key_name}")
     */
    public async delete(sshKeyName: string, requestOptions?: SshKeys.RequestOptions): Promise<unknown> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FluidStackApiEnvironment.Default,
                `ssh_keys/${encodeURIComponent(sshKeyName)}`
            ),
            method: "DELETE",
            headers: {
                "api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "fluidstack",
                "X-Fern-SDK-Version": "0.0.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new FluidStackApi.UnauthorizedError(
                        await serializers.Message.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new FluidStackApi.UnprocessableEntityError(
                        await serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.FluidStackApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FluidStackApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FluidStackApiTimeoutError();
            case "unknown":
                throw new errors.FluidStackApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
